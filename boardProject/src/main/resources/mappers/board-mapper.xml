<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.kh.project.board.model.mapper.BoardMapper">

<!-- 
	resultType 미작성 할 수 있는 조건
	- mapper 메서드의 반환형이 별칭으로 등록 되어 있을 때
 -->
 
 <!-- 
 	resultMap 태그
 	1) 조회된 컬럼명과 DTO 필드명이 일치하지 않을 때 매핑(연결) 시켜주는 역할
 	* 지금은 이거 사용
 	2) <collection> 태그를 추가 작성하여 여러 행 결과가 조회되는 다른 SELECT를 수행한 후
 		그 결과를 지정된 DTO의 필드에 대입
 		
 		type 속성 : 연결할DTO 또는 별칭
 		id 속성 : 해당 태그를 식별할 값
  -->
  
  <resultMap type="Board" id="board_rm">
  
  		<!-- id 태그 : pk 역할을 하는 컬럼, 필드를 작성하는 태그 -->
  		<id property="boardNo" column="BOARD_NO"/>
  		
  		<!-- collection 태그
			select로 조회된 결과를 컬렉션(List)에 담아
			지정된 필드에 세팅
			
			property : List를 담을 DTO의 필드명
			select : 실행할 select의 id
			column : 조회 결과 중 지정된 컬럼의 값을 파라미터로 전달
			javaType : List(컬렉션)의 타입을 지정
			ofType : List(컬렉션)의 제네릭(타입 제한) 지정
			
			mapper의 변수명과 같은 id의 쿼리가 실행되고, 
			그 결과는 쿼리의 id와 같은 select 속성을 가진 
			<collection> 태그에서 정의된 property 속성의 DTO 값에 저장된다.
		-->
		
		<!--  시작 태그 안에 / : 시작하자마자 종료함 -->
		
		<!-- 해당 게시글 이미지 목록 조회 후 필드에 저장 -->
		<collection 
			property = "imageList"
			select   = "selectImageList" 
			column   = "BOARD_NO"
			javaType = "java.util.ArrayList"
			ofType   = "BoardImg"
		/>
		
		<!-- 해당 게시글 댓글 목록 조회 후 필드에 저장 -->
		<collection 
			property = "commentList"
			select   = "selectCommentList" 
			column   = "BOARD_NO"
			javaType = "java.util.ArrayList"
			ofType   = "Comment"
		/>
			
		
		
  
  </resultMap>

	<select id="selectBoardTypeList">
	
		SELECT BOARD_CODE "boardCode", BOARD_NAME "boardName"
        FROM BOARD_TYPE
        ORDER BY BOARD_CODE
	
	</select>
	
	<select id="getListCount" >
	
		SELECT COUNT(*)
		FROM BOARD
		WHERE BOARD_DEL_FL = 'N'
		AND   BOARD_CODE = #{boardCode}
		
	</select>
	
	<!-- 
		마크업언어에서 부등호 표시하기(>,<) 태그로 인식되지 않게
		<![ CDATA [ "문자열" ] ]>
		
		- 해당 태그 내부에 작성된 문자열은 특수 기호로 해석하지 말고
		  문자(Charactor)그대로 인식하라는 태그
		  (순수 문자 데이터임을 지정)
	
	 -->
	
	<!-- 특정 게시판의 지정된 페이지 목록 조회 -->
	<select id="selectBoardList">
	
		SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT,
			(	SELECT COUNT(*) 
				FROM "COMMENT" C
				WHERE C.BOARD_NO = B.BOARD_NO ) COMMENT_COUNT,	
				
			(	SELECT COUNT(*)
				FROM "BOARD_LIKE" L
				WHERE L.BOARD_NO = B.BOARD_NO ) LIKE_COUNT,
				
			<![CDATA[  
				 CASE
					 WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24 / 60 
					 THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60 * 60)  || '초 전'
					 
					 WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24 
					 THEN FLOOR((SYSDATE - BOARD_WRITE_DATE)* 24 * 60) || '분 전'
					 
					 WHEN SYSDATE - BOARD_WRITE_DATE < 1
					 THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24) || '시간 전'
					 
					 ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD')
				 	
				 END BOARD_WRITE_DATE
		 	]]>
			
		
		FROM "BOARD" B
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		ORDER BY BOARD_NO DESC
	
	</select>
	
	 
	 <!-- resultMap : 해당 쿼리의 결과를 id가 동일한 select 태그를 통해 list 형태로 저장.
	 				  저장되는 위치는 select 태그로 정의한 property 의 속성값인 DTO
	  게시글 상세 조회
	  board_rm :  -->
	 <select id="selectOne" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE,
		BOARD_CONTENT, BOARD_CODE, READ_COUNT,
		MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG,

		TO_CHAR(BOARD_WRITE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') BOARD_WRITE_DATE,
		TO_CHAR(BOARD_UPDATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS')
		BOARD_UPDATE_DATE,

		   (SELECT COUNT(*)
			FROM "BOARD_LIKE"
			WHERE BOARD_NO = #{boardNo}) LIKE_COUNT,
	
		   (SELECT IMG_PATH || IMG_RENAME
			FROM "BOARD_IMG"
			WHERE BOARD_NO = #{boardNo}
			AND IMG_ORDER = 0) THUMBNAIL ,
			
		   (SELECT COUNT(*)	FROM "BOARD_LIKE"
			WHERE MEMBER_NO = #{memberNo}
			AND BOARD_NO=#{boardNo}) LIKE_CHECK

		FROM "BOARD"
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND
		BOARD_CODE = #{boardCode}
		AND BOARD_NO = #{boardNo}

	</select>
 
 
 <!-- 상세 조회한 게시글의 이미지 목록을 조회 -->
 	<select id="selectImageList" resultType="BoardImg">
 		SELECT * 
 		FROM "BOARD_IMG" 
		WHERE BOARD_NO = #{boardNo}
		ORDER BY IMG_ORDER
 	</select>
 	
 	<!-- 상세 조회한 게시글의 댓글 목록 조회 -->
 	<select id="selectCommentList" resultType = "Comment">
 		SELECT LEVEL, C.* FROM
			(SELECT COMMENT_NO, COMMENT_CONTENT,
			    TO_CHAR(COMMENT_WRITE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') COMMENT_WRITE_DATE,
			    BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG, PARENT_COMMENT_NO, COMMENT_DEL_FL
			FROM "COMMENT"
			JOIN MEMBER USING(MEMBER_NO)
			WHERE BOARD_NO = #{boardNo}) C
			WHERE COMMENT_DEL_FL = 'N'
			OR 0 != (SELECT COUNT(*) FROM "COMMENT" SUB
					 WHERE SUB.PARENT_COMMENT_NO = C.COMMENT_NO
					 AND COMMENT_DEL_FL = 'N')
		START WITH PARENT_COMMENT_NO IS NULL
		CONNECT BY PRIOR COMMENT_NO = PARENT_COMMENT_NO
		ORDER SIBLINGS BY COMMENT_NO
 	</select>
 	
 	<!-- 좋아요 해제 -->
 	<delete id="deleteBoardLike">
 		DELETE FROM "BOARD_LIKE"
 		WHERE MEMBER_NO = #{memberNo}
 		AND BOARD_NO = #{boardNo}
 	</delete>
    
    <!-- 좋아요 체크 -->
    <insert id="insertBoardLike">
    	INSERT INTO "BOARD_LIKE"
    	VALUES ( #{memberNo}, #{boardNo} )
    </insert>
 
 
 	<!-- 게시글 좋아요 수 조회 -->
	<!-- 하나만 전달 할 때는 매개변수를 아무거나 해도 됨 -->
 	<select id="selectLikeCount" resultType="_int">
 	
 		SELECT COUNT(*) FROM "BOARD_LIKE"
 		WHERE BOARD_NO = #{boardNo}
 	
 	</select>
 	
 	
 	<!-- 조회 수 1 증가 -->
 	<update id="updateReadCount">
 	
 		UPDATE "BOARD" SET
 		READ_COUNT = READ_COUNT + 1
 		WHERE BOARD_NO = #{boardNo}
 	
 	</update>
 	
 	<!-- 조회수 조회 -->
 	<select id="selectReadCount">
 	
 		SELECT READ_COUNT
		FROM "BOARD"
		WHERE BOARD_NO = #{boardNo}
 	
 	</select>
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
</mapper>