Frame work, Liblary, API 차이 확인하기
	FrameWork
		앱 개발 시 필요한 기본 구조. 뼈대 제공 틀
		구조에 맞게 개발하면도므로 효율적인 개발 방법
		코드의 재사용성 증가. 일련의 클래스 묶음이나 뼈대, 틀을 라이브러리 형태로 제공함
	Liblary
		자주 사용되는 기능을 모아둔 코드의 집합
		접근 방법은 없음
	API(Application Programming Interface)
		기능을 실행하기 위한, 기능에 접근하기 위한 방법
		기능에 접근하기 위한 지정된 방식

Spring Framework : Spring	
	자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크
	동적인 웹 사이트 개발 위한 여러 서비스 제공
	전자정부 표준 프레임워크의 기반 기술
	Java 웹 개발용 프레임워크 동적 웹 개발에 사용

Spring FrameWork(Spring)의 주요 특징
	IOC (Inversion of Control) 제어 반전
		컨트롤의 제어권이 개발자가 아니라 프레임워크에 있다는 뜻
		객체의 생성부터 모든 생명주기까지 프레임워크가 주도함
		== 스프링은 IOC를 통해 구동 시 필요한 
		   객체의 생성부터 생명주기까지 해당 객체의 관리를 직접 수행
		개발자는 객체 생성, 호출을 직접 하지 않고 Spring Container가 만든 객체를 필요할 때 얻어옴
		클래스간의 결합도를 낮추고 유지보수성 향상
		* 결합도가 높을 때 
		  - 하나의 클래스를 수정 할 때, 다른 연관된 기능들을 모두 수정해야함
		  - 재사용성 낮음(다른 기능들과 연결되어 있으니까)
			- 프로그램의 이해도를 높임(하나만 봐서는 안되니까)

	Bean(빈, 자바는 커피, 이것은 커피콩)
		Spring 에서 IOC를 이용해 직접 생성하고 생명 주기 제어를 담당하는 객체
		!= instance(개발자가 생성하고 관리하는 객체)
		서버 실행 시 Spring Container가 Component Scan(Bean Scanning)을 수행하여
		@Component, @Repository, @Service, @Controller 어노테이션이 붙은 클래스를 모두 찾아
		Bean으로 등록
		Spring Legacy Project : <context:component-scan> 태그
		Spring Boot Project   : @ComponentScan 어노테이션 을 통해 기능 수행

	DI(Dependency Injection)의존성 주입
		- 설정파일(XML)이나 어노테이션을 통해 객체 간의 의존관계를 설정,
		  개발자가 직접 객체를 생성하지 않고 Spring Container가만들어 둔 객체를
		  필요한 위치에 주입함(의존)
		- IOC 구현의 핵심 기술. IOC를 통해 Spring이 생성하고 관리하는 Bean(객체)을 
		  필요한 곳에 주입
		-> 객체간의 결합도를 약화시킬 수 있음
		- DI 방법
			- @Autowired : 해당 필드, Setter, 생성자에 같은 타입, 상속관계인 Bean을 자동으로 주입
			- @RequiredArgsConstructor : 생성자 방식 @Autowired 코드를 자동완성해줌
				> 조건 : final 필드 작성(final필드에 대한 의존성 주입 코드)
				> Lombok에서 제공


	POJO(Plain Old Java Object) 순수하고 오래된 자바 객체(일반적인 자바 객체)
		특정 기술, 라이브러리의 내용을 상속 받지 않고도 일반적인 자바 객체를 사용할 수 있게 함
	
	AOP(Ascpect Orientend Programming) 관점지향프로그래밍
		공통적인 관심사(로깅, 보안, 트랜잭션 관리)등
		을 분리하여 코드 중복 줄이고 유지보수성을 향상

	Spring MVC(Model, View, Controller)
		MVC 디자인 패턴을 적용할 수 있는 어노테이션지원,
		IOC, DI를 이용해 의존 관계를 관리하여 개발자가 아닌 서버가 객체를 관리하는
		웹 어플리케이션 구축 가능

	PSA(Portable Service Abstraction)
		별도의 추상화 레이어를 제공, 다양한 기술 스택을 쉽게 사용 가능
		외부 라이브러리, API등 외부 기술을 쉽게 이용 가능하게 여러 인터페이스, 추상 클래스 제공

Spring Boot
	Spring MVC Project 구성시 필요한 복잡한 환경 설정을 최소화 하여
	개발자로 하여금 비즈니스 로직 구현에 집중할 수 있게 함
	장점 : 내장된 서버를 제공, 독립실행이 가능한 웹 애플리케이션 개발 가능
	-> 자동으로 내장된 Tomcat 서버가 시작됨 

	도구 구성, 라이브러리 관리 최소화 : 다양한 Starter POM 파일 제공
	프로젝트 생성, 초기 설정 간소화 : Spring Starter를 이용

Spring MVC(Model View Controller)
	Spring에서는 MVC2 패턴을 지원
	* MVC2 패턴 : 개발 방식을 공식화 한 패턴

	요청 과정은 다음과 같음
		1. 클라이언트(Request) -> Dispatcher Servlet
		2. Dispatcher Servlet -> Handler Mapping으로 받은 Request 전달
			Handler Mapping -> Dispatcher Servlet 으로 받은 req 에 맞는 작업 지정
		3. Dispatcher Servlet -> Controller로 작업 수행 요청
		4. Controller는 요청에 맞는 Business 로직 실행(Service, DAO, Database 상호 작용)
		5. Controller는 나온 작업을 Dispatcher Servlet으로 전달
		6. Dispatcher Servlet으로 View Resolver에 일치하는 View 불러오라고 시킴
			View Resolver는 View 선택 후 Dispatcher Servlet으로 전달
		7. Dispatcher Servlet, Client에게 받은 View 전달(Response)
		요약
			req → DispatcherServlet → Controller → Service → Mapper → DB
			→ Mapper → Service → Controller → DispatcherServlet

Controller → Dispatcher 응답 방법
	1) forward(요청위임)인 경우
		DispatcherServlet → View Resolver → html로 응답화면 만들기(Thymeleaf) → 클라이언트 응답
	
	2) redirect(재요청)(다른 컨트롤러를 요청)
		DispatcherServlet → 다른 Controller 메서드 요청
	
	3) 비동기 요청(Ajax)인 경우(특정 데이터만 요구함. 데이터만 반환하면 됨)
		@ResponseBody가 붙은 Controller 메서드 반환
		→ DispatcherServlet → 클라이언트 응답 본문( Js fetch() ) 반환
		 

	과정을 보았으니 각자의 역할에 대략 파악했을 것임.
	이제 다음 정의들을 보고 이것을 확고히 할 것.
		- Client : 사용자, 요청자. 웹브라우저.
		- Dispatcher Servlet : 클라이언트의 요청을 전달 받고, 요청에 맞는 컨트롤러가 리턴 한 결과 값을 
			view에 전달하여 알맞은 응답(Response) 생성
		- Handler Mapping : Dispatcher Servlet의 직원1.
			요청 URL을 어떤 컨트롤러가 처리할 지 결정
		- Controller : 클라이언트의 요청을 처리한 뒤, 결과를 DispatcherServlet에게 리턴
		- ModelAndView : 컨트롤러가 처리한결과 정보 및 뷰 선택에 필요한 정보를 담음
		- View Resolver : 컨트롤러의 처리 결과를 생성할 View를 결정
		- View : 컨트롤러의 처리 결과 화면을 생성, JSP나 Velocity 템플릿 파일 등을 View로 사용

스프링 부트 프로젝트 실행 방법(서버 배포 방법)
	프로젝트 실행 파일 위치
	 - src/main/java/000Application.java
	 - 000 : 프로젝트 이름
	 - 실행(ctrl + f11) -> 내장된 Tomcat 서버에서 배포 시작
	 - 브라우저 자동 실행x, 각자 주소 입력

프로젝트 구조
	src/main/java : 자바 코드를 모아두는 폴더
	src/main/resources : 자바에서 사용할 자원, 설정 파일 모아두는 폴더
		- templates : Java템플릿(응답화면)을 모아두는 폴더
		- static : templates에 적용될 정적 자원을 모아두는 폴더(js, css, 이미지 파일)
		- application.properties : Spring Boot(이하 Spring) 관련 설정을 정의(중요!)
		  - 프로젝트 이름, 포트번호, 자동리로드, 서버재시작 설정,
		    로그레벨 지정, 사용할 자원 지정 등..
	build.gradle : gradle(오픈소스 빌드 도구 == maven의 pom.xml)
				   프로젝트에 필요한 라이브러리, 배포, 빌드 관련 설정을 작성하는 파일
	Project and External Dependancies : build.gradle 에 명시된 라이브러리 모음

Thymeleaf
	웹 및 독립형 실행 환경 모두를 위한 최신 서버측 Java 템플릿 엔진
	SpringBoot에서 권장(반 강제)하는 템플릿 엔진

	++템플릿엔진 : 화면 구성한 뒤 내용(데이터)만 바꾸는 것
	  만들어둔 화면(html)에 데이터를 추가하여 하나의 html로 만들어서 응답
	  JSP도 템플릿 엔진임

내장객체 Scope 범위
	page < request < session < application

Model : http로 값 전달하기
	Spring에서 데이터 전달 역할을 하는 객체
	org.springframework.ui 패키지
	기본 scope : request
	@SessionAttributes 와 함께 사용 시 session scope로 변환

	작성법
		매개변수 내에 Model 사용할이름

ModelAndView : 데이터전달 + forward할 파일 경로 지정

Spring EL(스프링 표현 언어)
	${key} : 변수, Model 등을 이용해 세팅한 값 출력
	th:text 속성 = "속성값"
		설명 : 타임리프를 이용해서 속성 값을 작성된 태그의 내용(innerText)로 출력
		       th속성은 출력화면(응답화면)에서 안보임 -> 해석된 후 사라짐
		작성법 : <h4 th:text="${변수명}">Default Message</h4> test1의 값은 Spring에서 설정
			변수명 : 컨트롤러에서 모델에 추가되거나, 템플릿에서 직접 선언 가능

단일 값 출력하기
	th:block 태그
		내용 : Thymeleaf에서 제공하는 유일한 태그
			   태그 내에 th속성을작성하여 정의하는 것이 일반적이지만
			   th 속성을 작성할 태그가 존재하지 않을때 사용
			   조건, 반복문과 함게 사용하는 경우가 많음
			   태그 사이의 내용은 출력되지 않는다
		작성법: <th:block th:text="${productName}">상품명11111</th:block>

복수 값 출력하기
	th:each = "변수명:${List 또는 배열}"
		내용 : 향상된 for문
			   List 또는 배열 길이만큼 반복
			   매 반복시  List 또는 배열의 요소를 차례대로 꺼내
			   변수명에 저장함
		작성법
			<li th:text="${fruitList}">과일 목록</li>
			<!-- List여도 요소를 꺼내는 방식은 배열 표기법 사용 -->
			<li th:text="${fruitList[0]}">0번 인덱스 과일</li>
			<li th:text="${fruitList[1]}">1번 인덱스 과일</li>
			<li th:text="${fruitList[2]}">2번 인덱스 과일</li>

			th:each 사용 시
			<ul>
				<th:block th:each="fruit : ${fruitList}">
				<li th:text="${fruit}">과일명</li>
				</th:block>
			</ul>

DTO 객체 출력
	<태그 th:text="${DTO에서 정한 변수명}">태그 안 내용은 안나옴</태그>
	<태그 th:object></태그>
	여기까지공부함

각종 어노테이션 정리
	하기 전에..
	기존 Servlet은 클래스 단위로 하나의 요청 처리만 가능했다면
	Spring은 메서드 단위로 요청 처리 가능하다.
	-> 하나의 클래스로 여러 메서드 처리 가능하다는 뜻.
	따라서 코드 구조는 다음과 같이 진행됨
		@Controller
		@..
		public class className(){ // 클래스

			private String methodName(){ // 메서드
				// 내용 작성
				return " 접두,접미사 생략한 반환 할 html 위치";
			}
		}

	1. @Controller
	 - 작성 위치 : 클래스 상단
	 - 기능 	 : 현재 클래스가 요청, 응답을 제어 할 컨트롤러임을 명시
	 + Bean 으로 등록(== 객체로 생성해서 스프링이 관리한다 == 객체 선언을 따로 할 필요 없다)

	2. @RequestMapping("주소")
	 - 작성 위치 
	 	1) 클래스에 작성 : 공통 주소를 매핑
		2) 메서드에 작성 : 공통 주소 + 메서드가 위치한 파일 매핑(get,post 구분 안함)
	 - 기능 	 : 요청 주소를 처리할 메서드(클래스)를 매핑
	 - 특징 	 : 맨 앞 "/" 제외하고 작성, 모든 방식 가능
	 - 파생형 
	 	1) @GetMapping("주소")    : GET 방식 요청만 맵핑  (조회, READ)
		2) @PostMapping("주소")   : POST 방식 요청만 맵핑 (삽입, GET)
		3) @PutMapping("주소")    : Put 방식 요청만 맵핑  (수정, UPDATE) (form, is, a태그 요청 불가)
		4) @DeleteMapping("주소") : DELETE 방식 요청 맵핑 (삭제, DELTE)  (form, is, a태그 요청 불가)
		++ "주소" 는 메서드가 위치한 파일 주소가 아닌, 
		    요청을 받는 페이지에서 설정한 경로

		++ 왜 메서드별로 나누는거야? 한번에 하면 편하잖아 
			> 하나의 주소(url)을 이용해서 요청 방식에 따라 CRUD를 모두 수행하기 위해서

	3. @Slf4j
	 - 작성 위치 : 클래스상단
	 - 기능 	 : log 를 이용한 메세지 출력 시 사용(Lombok 제공)
	
	4. @RequestParam("key")
	 - 작성 위치 : 매개변수 앞에 작성
	 - 기능 	 : 파라미터에 전달되는 값이 낱개/여러개 인 경우 사용
	 			   메서드 매개변수 앞에 작성하고, 매개변수에 값이 주입됨
				   주입되는 데이터는 매개변수 타입에 맞게 자동 형변환/parsing 수행
				   key가 일치하는 요청 파라미터 얻어와 매개변수에 저장
	 작성법		 : 
	 	- 파라미터에 전달되는 값이 낱개   : 메서드 매개변수 앞에 @RequestParam("key") 작성
		- 파라미터에 전달되는 값이 여러개 : String[], List<자료형>, Map<String,Object> + name 값
	 - 속성 추가 작성법
	 	예시 : @RequestParam(value="name", required="false", defaultValue="1")
			value(name) : 전달 받은 input 태그의 name 속성값 == 파라미터 key 값
			required : 입력된 name 속성값 파라미터 필수 여부 지정(기본값:true(필수))
				required ="true" 일 때
				-> 파라미터가 존재하지 않으면 400 Bad Request 에러
				-> 파라미터가 null인 경우에도 동일한 에러
				++ 400 Bad Request 에러 : 파라미터 불충분 상황

			defaultValue : 파라미터 중 일치하는 name 속성이 없을 경우에 대입할 값
			-> 파라미터가 없을때 기본 값
			-> rquired ="false"인 경우에 사용

	5. @ModelAttribute
	 - 작성 위치 : 매개변수 안에
	 - 기능 	 : 요청 시 전달되는 파라미터의 name 속성값이 같이 사용되는 DTO의 필드명과 같다면
	 			   자동으로 setter를 호출하여 필드에 값을 세팅
	 - 요청 시 전달된 파라미터의 key 값 == @ModelAttribute 옆 작성된 DTO의 필드명이 같은 경우
	   해당 DTO 객체 생성 후 setter 메서드를 이용해 key와 필드명이 같은 필드에 값을 세팅한 객체를 반환
	 - 특징 	 
	 	1) DTO와 함께 사용함, DTO에 기본 생성자가 필수로 존재할 것
		2) DTO에 setter가 필수로 존재할 것
		3) 생략 가능함
		4) @ModelAttribute를 이용해 값이 필드에 세팅된 객체를 커맨드 객체라고 함
		5) 여러 파라미터를 하나의 DTO 객체로 받음

	6. @PathVariable
	 - 작성 위치 : @Request/Get/Post/Put/DeleteMapping 메서드 매개변수 안
	 - 기능 	 : 주소 중 일부분을 변수값처럼 사용
	 						 @Request/Get/Post/Put/DeleteMapping()에 작성된 
							 URL에서 특정 경로를 얻어와 변수에 저장하는 어노테이션
	  - 작성 예시 1
				@GetMapping("ex2/{number}")
				public String pathVariableTest(
				@PathVariable("number") int number
				// 주소 중 {number} 부분의 값을 가져와 매개변수에 저장 
				// + 자료형 변수명으로 지정
				// + requestScope에 세팅
				) {
				
				log.debug("number : " + number);
				
				return "example/testResult";
			}

		- 작성 예시 2
			요청 주소 : /test/영주/하와이

			@GetMapping("test/{apple}/{banana})
			public String testz(
				@PathVariable("apple") String a,
				@PathVariable("banana") String b,
			){
				// a에 저장된 값 : 영주
				// b에 저장된 값 : 하와이
			}

			++ 추가 내용
				요청 주소에 정규표현식을 사용해서 요청 주소를 제한할 수 있음.
				ex) @GetMapping(”{boardCode:[0-9]+}”)
			  // boardCode 자리에 숫자로만 된 주소만 매핑함



	7. @Mapper
	 	1) 인터페이스(객체 등록 못함)을 객체처럼 쓸 수 있게 해주는 어노테이션
		2) Mybatis에서 제공하는 어노테이션
		3) Mybatis의 인터페이스를 마킹하여 해당 인터페이스를 기반으로 SQL 매퍼를 생성하도록 지시
		4) 주로 sql문과 연결할 때 사용

	8. @Bean
	 - 작성 위치 : 
	 - 기능 	 : 개발자가 생성한 객체를 Spring이 관리하도록 하는 어노테이션

	9. @Configuration
	 - 기능 	 : 서버 시작 시 내부에 작성된 모든 메서드를 실행
	 	설정 내용을 작성해서 서버 시작 시 모두 적용되게 함
	 - 작성 위치 : 
	
	10. @Getter
	 - 기능 	 : getter 코드 자동완성
	 - 작성 위치 : 
	
	11. @Setter
	 - 기능 	 : setter 코드 자동완성
	 - 작성 위치 : 
	
	12. @NoArgsconstructor
	 - 기능 	 : 기본 생성자 자동완성
	 - 작성 위치 : 

	13. @AllArgumentsConstructor
	 - 기능 	 : 모든 필드 초기화 생성자 자동완성
	 - 작성 위치 : 

	14. @Tostring
	 - 기능 	 : toString() 오버라이딩 자오완성
	 - 작성 위치 : 

	15. @SessionAttributes{("key', "key")}
	 - 기능 	 : Model을 이용해서 추가된 속성(Model.addAttribute("key", value))
	 			   key가 일치하는 속성을 request → session scope로 변경
	 - 작성 위치 : 

	16. @SessionAttribute("key")
	 - 기능 	 : Session에 등록된 속성 중 key가 일치하는 속성을 옆에 작성된 매개변수에 주입(대입)
	 - 작성 위치 : 

	17. @PropertySource("경로")
	 - 기능 	 : 지정된 경로의 properties 파일 내용을 읽어와 사용
	 - 작성 위치 : DBconfig 제일 위에

	18. @ConfigurationProperties("prefix" = 접두사)
	 - 기능 	 : 읽어온 Properties 파일에서 접두사가 일치하는 내용만 모두 얻어와 
	 			   Bean 필드에 세팅
	 - 작성 위치 : 

	19. @RequestBody
	 - 기능 	 : 비동기 요청(Ajax)시 요청 body에 쓴 값을 얻어와 매개 변수에 저장
	 - 작성 위치 : 

	20. @ResponseBody
	 - 기능 	 : 비동기 요청에 대한 응답을 응답 본문(fetch() 코드 작성 부분)
	 			   으로 그대로 돌려보낸다.
	 - 작성 위치 : 

	21. @RestController
	 - 기능 	 : 요청/응답 제어(컨트롤러)역할 명시 + Bean 등록
	 			   내부 메서드가 모두 비동기인 컨트롤러
				   + @ResponseBody + @Controller → 모든 응답이 데이터

	22. @Transactional
	 - 기능 	 : UnCheckedException(Runtime Exception)의 하위 예외들
	 			   발생 시 해당 서비스에서 수행한 모든 SQL(DML (INERT,UPDATE,DELETE) )을 
				   rollback
	 - rollbackFor속성 : 언제 rollback할지 예외를 지정
	 - 작성 위치 : 

	 1. @
	 - 기능 	 :
	 - 작성 위치 : 

	 1. @
	 - 기능 	 :
	 - 작성 위치 : 

	 1. @
	 - 기능 	 :
	 - 작성 위치 : 
	
IOC 관련 어노테이션
	특정 클래스에 IOC 관련 어노테이션을 작성
	-> Bean으로 등록되어 서버 실행 시 Spring Container에 의해 Bean 객체로 만들어짐

	1. @Component : 객체(컴포넌트)를 나타내는 일반적인 타입으로 <bean>태그와 동일한 역할
		Bean 으로 등록하라는 어노테이션의 부모 어노테이션

	2. @Repository : 퍼시스턴스레이어, 영속성을 가지는 속성(파일, 데이터베이스)를 가진 클래스
		*퍼시스턴스레이어 : 데이터를 저장하고 검색하는데 사용되는 부분.
		 데이터베이스와의 상호작용 담당, 데이터를 영구적으로 보존 및 필요할 때 검색하게 함
		 저장소(DB,File)연결 역할 명시 + Bean 등록

	3. @Service : 서비스레이어, 비즈니스 로직(가공, 트랜잭션) 처리 역할 명시 + Bean 등록
	 	ex) Service Class

	4. @Controller : 프레젠테이션 레이어, 웹 애플리케이션에서 View에서 전달된 웹 요청과
	   응답을 처리하는 클래스
	   ex) controller Class

DI 관련 어노테이션
	1. @Autowired  : 정밀한 의존 관계 주입(DI)이 필요한 경우에 유용함
	 - 적용범위 : 필드변수, setter메서드, 생성자, 일반 메서드에 적용 가능함
	 - 의존하는 객체를 주입할 때 주로 Type을 이용함
	 - <property>, <constructor-arg> 태그와 동일한 역할을 함
	
	2. @Qualifier : @Autowired와 함께 쓰이며, 한 프로젝트 내에 @Autowired로 
				 의존성을 주입하고자 하는 객체가 여러 개 있을 경우,
				 @Qulifier("name")을 통해 원하는 객체를 지정하여 주입 가능

파라미터 값 얻어오는 방법

	1. HttpServletRequest.getParameter("key") 이용
		HttpServletRequest : 요청 클라이언트 정보, 제출된 파라미터 등을 저장한 객체
		클라이언트 요청 시 생성됨
		작성 방법 : 메서드의 매개변수로 작성
		  예시 -> @PostMapping("test1") // /param/test1 POST 방식으로 매핑
				   public String paramTest1(HttpServletRequest req) {}
	
	2. @RequestParam 어노테이션 (각종 파라미터 4번 참고)
	   한개의 파라미터에 전달되는 값이 낱개/ 여러개인 경우 사용.
	   request 객체를 이용한 파라미터 전달 어노테이션
	   매개변수 앞에 해당 어노테이션을 작성하면 매개변수의 값이 주입됨
	   이때 주입되는 데이터는 매개변수의 타입이 맞게 자동으로 형변환/파싱 수행
	   사용법
	   	메서드 매개변수 안에 작성
		파라미터 전달 값이 낱개인 경우
		 -> @RequestParam("name") 자료형 name
		파라미터 전달 값이 여러개 경우
		 -> @RequestParam(value="name", required="true"/"false", defaultValue="")
		    + String[] arrName
			+ List<자료형> listName
			+ Map<String, Object> mapName
			  -> Map의 경우 key 값이 중복되면 덮어씌워짐.

컨트롤러 관련 기능

	**** ArgumentResolver ****
		컨트롤러 메서드 매개변수에 알맞은 객체를 주입 또는 생성해주는 역할의 객체
		https://docs.spring.io/spring-framework/reference/web/webflux/controller/ann-methods/arguments.html

	Model
		- 데이터 전달용 객체(기본 : requestScope → forward시 데이터 전달)
		- @SessionAttributes와 함께 사용 시 session으로 변경
		- Model.addAttribute("key", "value")
		
	RedirectAttributes
		- 리다이렉트 시 requestScope로 데이터를 전달하는 객체
		- 전달원리
			> 리다이렉트 전 : request
			> 리다이렉트 중 : request → session으로 대피(이동)
			> 리다이렉트 후 : session → request 로 복귀
		- RedirectAttrubutes.addFlashAttribute("K", "V")

	**** Controller 요청/응답 메세지 변환 ****
		HttpMessageConverter
			> 요청 데이터의 자료형을 변환
				String > int
				String(JSON) → Map, DTO
				
			> 응답 데이터의 자료형을 변환
				int, String → Text
				Map, List, DTO → JSON  

설정 관련 파일

	ooo.properties 파일
		> 서버, 객체(bean)관련 설정 내용을 저장하는 파일
		ex) application.properties : 서버 전체에서 사용될 설정을 작성하는 파일
			> (SpringBoot 프로젝트 생성 시 자동 생성)

	config.properties 파일
			> DBCP, 이메일(SMTP), 파일 업로드 경로 등
			관련 Bean 생성 시 적용할 설정을 작성한 파일
			해당 파일에 작성된 내용은 공유되면 문제 일으킬 가능성 높음
			.gitignore 처리 필수!!!!!
	
디버그
	코드 오류 해결 방법 중 하나
	오류는 없는데 정상 수행이 안될 때 확인하는 법
	application.properties 에서 로그레벨 debug로 지정해야 사용 가능
	-> logging.level.edu.kh.demo=debug

리다이렉트(재요청)
	메서드 반환 값으로 "return:/요청주소"; 작성






